/**
 * Used to build a dynamic html page to a specific template
 * 
 * @module template 
 */

'use strict';

var fs = require('fs'),
    path = require('path'),
    helper = require('./helper'),
	logger = require('./logger'),
	config = require('./config'),
	getSection;

/**
 * Default template simply gets the header, specified page content and the footer
 * The layout is defined by config.defaultLayout and config.layoutTemplate
 * The default layout can be overridden by changing layout in the controller
 * 
 * @param {Object} model All model data needed to build the page
 * @param {String} page The page that we want to build
 * @param {String} layout The layout to be used for this page
 * @param {Object} callback Returns the built html for the page via callback
 */
exports.getContents = function(model, page, layout, callback) {
	var content = '',
        layoutTemplate = config.layoutTemplates[layout].slice(0),
        layoutSection;
	// call getSection and define recurringGetSection function to allow for recursive call for each layout section
	getSection(layoutTemplate.shift(), function recurringGetSection(data){
	    content += data;
	    if(layoutTemplate.length > 0) {
	        // if layout array isn't empty get the next section
	        layoutSection = layoutTemplate.shift();	        
	        if(layoutSection === config.dynamicFlag) {
	            // if dynamic content call the parent function recusively
	            getSection(page, recurringGetSection);
	        } else {
	            getSection(layoutSection, recurringGetSection);
	        }	        
	    } else {
	        // when layout array is empty return the page via a callback 
	        callback(helper.templateHelper(model, content));
	    }
	});
};

/**
 * Retrieves an individual page section from the views
 * 
 * Returns the section html via a callback
 */
getSection = exports.getSection = function(section, callback) {    
    var sectionPath = path.resolve(config.views.path, section + '.html');    
	fs.readFile(sectionPath, function (error, data) {
		if(error) {
			logger.debug(error);
			throw error;
		}
		callback(data);
	});
	
};

